import tkinter as tk
import sqlite3
import random
import time
import threading
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from tkinter import messagebox

# üé® –ù–æ–≤—ã–π —Å—Ç–∏–ª—å
BG_COLOR = "#222222"  # –¢—ë–º–Ω—ã–π —Ñ–æ–Ω
TEXT_COLOR = "#FFFFFF"  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
BTN_COLOR = "#FF4500"  # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
BTN_HOVER = "#CC3700"  # –¢—ë–º–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
BTN_TEXT_COLOR = "#222222"  # –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
GRAPH_COLOR = "yellow"  # –¶–≤–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞

conn = sqlite3.connect("users.db", check_same_thread=False, timeout=20)
cursor = conn.cursor()

active_crypto_screen = None  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏

def create_styled_button(parent, text, command):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É."""
    btn = tk.Button(parent, text=text, command=command, font=("Arial", 12, "bold"),
                    fg=BTN_TEXT_COLOR, bg=BTN_COLOR, activebackground=BTN_HOVER,
                    relief="flat", bd=2, padx=10, pady=5, cursor="hand2")
    btn.pack(pady=5, fill="x")
    return btn

def show_trading_screen(user_id, crypto, root_frame, show_main_screen):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º"""
    global active_crypto_screen
    active_crypto_screen = crypto

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
    for widget in root_frame.winfo_children():
        widget.destroy()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
    root_frame.configure(bg=BG_COLOR)
    header = tk.Label(root_frame, text=f"{crypto} - –¢–æ—Ä–≥–æ–≤–ª—è",
                      font=("Arial", 16, "bold"), fg=TEXT_COLOR, bg=BG_COLOR)
    header.pack(pady=10)

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    graph_frame = tk.Frame(root_frame, bg=BG_COLOR)
    graph_frame.pack(fill="both", expand=True, padx=20, pady=10)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.set_facecolor(BG_COLOR)
    fig.patch.set_facecolor(BG_COLOR)
    canvas = FigureCanvasTkAgg(fig, master=graph_frame)
    canvas.get_tk_widget().pack(fill="both", expand=True)

    # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    price_label = tk.Label(root_frame, text="–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ...",
                           font=("Arial", 14), fg=TEXT_COLOR, bg=BG_COLOR)
    price_label.pack(pady=5)

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º
    press_pos = None
    xlim_start = None
    ylim_start = None
    ZOOM_FACTOR = 1.2

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
    def on_press(event):
        nonlocal press_pos, xlim_start, ylim_start
        if event.button == 1:  # –õ–ö–ú
            press_pos = (event.x, event.y)
            xlim_start = ax.get_xlim()
            ylim_start = ax.get_ylim()

    def on_motion(event):
        nonlocal press_pos, xlim_start
        if press_pos is None or event.xdata is None:
            return

        dx = (event.x - press_pos[0]) * 0.5  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        ax.set_xlim(xlim_start[0] - dx, xlim_start[1] - dx)
        canvas.draw_idle()

    def on_release(event):
        nonlocal press_pos
        press_pos = None

    def on_scroll(event):
        nonlocal xlim_start, ylim_start
        cur_xlim = ax.get_xlim()
        cur_ylim = ax.get_ylim()

        xdata = event.xdata or (cur_xlim[0] + cur_xlim[1]) / 2
        ydata = event.ydata or (cur_ylim[0] + cur_ylim[1]) / 2

        if event.button == 'up':
            scale_factor = 1 / ZOOM_FACTOR
        elif event.button == 'down':
            scale_factor = ZOOM_FACTOR
        else:
            return

        ax.set_xlim([
            xdata - (xdata - cur_xlim[0]) * scale_factor,
            xdata + (cur_xlim[1] - xdata) * scale_factor
        ])
        ax.set_ylim([
            ydata - (ydata - cur_ylim[0]) * scale_factor,
            ydata + (cur_ylim[1] - ydata) * scale_factor
        ])
        canvas.draw_idle()

    # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    canvas.mpl_connect("button_press_event", on_press)
    canvas.mpl_connect("motion_notify_event", on_motion)
    canvas.mpl_connect("button_release_event", on_release)
    canvas.mpl_connect("scroll_event", on_scroll)

    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∞
    def reset_zoom():
        ax.relim()
        ax.autoscale_view()
        canvas.draw()

    btn_reset = tk.Button(root_frame, text="–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±", command=reset_zoom,
                          font=("Arial", 10), bg=BTN_COLOR, fg=BTN_TEXT_COLOR)
    btn_reset.pack(pady=5)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    amount_frame = tk.Frame(root_frame, bg=BG_COLOR)
    amount_frame.pack(pady=10)

    tk.Label(amount_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", font=("Arial", 12),
             fg=TEXT_COLOR, bg=BG_COLOR).pack(side="left")

    amount_var = tk.DoubleVar(value=1.0)
    amount_entry = tk.Entry(amount_frame, textvariable=amount_var,
                            font=("Arial", 12), width=10, bg="#333333",
                            fg=TEXT_COLOR, insertbackground=TEXT_COLOR)
    amount_entry.pack(side="left", padx=5)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    btn_frame = tk.Frame(root_frame, bg=BG_COLOR)
    btn_frame.pack(pady=10)

    create_styled_button(btn_frame, "–ö—É–ø–∏—Ç—å",
                         lambda: buy_crypto(user_id, crypto, amount_var.get()))
    create_styled_button(btn_frame, "–ü—Ä–æ–¥–∞—Ç—å",
                         lambda: show_sell_window(user_id, crypto))
    create_styled_button(btn_frame, "–ù–∞–∑–∞–¥",
                         lambda: stop_trading_and_go_back(user_id, root_frame, show_main_screen))

    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    def update_graph():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ —Ü–µ–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if active_crypto_screen != crypto or not root_frame.winfo_exists():
            return

        try:
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –∏—Å—Ç–æ—Ä–∏—é
            conn = sqlite3.connect("users.db")
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute("BEGIN TRANSACTION")
            cursor.execute("SELECT price FROM crypto_prices WHERE crypto=?", (crypto,))
            current_price = cursor.fetchone()[0]

            cursor.execute("""
                SELECT price 
                FROM price_history 
                WHERE crypto=? 
                ORDER BY timestamp ASC
                LIMIT 100
            """, (crypto,))
            price_history = [p[0] for p in cursor.fetchall()]
            conn.commit()

            if len(price_history) < 1:
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            current_xlim = ax.get_xlim()
            current_ylim = ax.get_ylim()

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
            user_modified = not np.allclose(current_xlim, ax.dataLim.intervalx)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            ax.clear()
            x_values = list(range(len(price_history)))

            ax.plot(
                x_values,
                price_history,
                marker='o',
                markersize=3,
                linestyle='-',
                color=GRAPH_COLOR,
                linewidth=1.5
            )

            ax.set_ylim(bottom=0)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(f'{crypto} - ${current_price:.2f}', color=TEXT_COLOR, pad=10)
            ax.set_xlabel('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏', color=TEXT_COLOR)
            ax.grid(color="#444444")
            ax.tick_params(colors=TEXT_COLOR)

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if not user_modified:
                if len(price_history) > 20:
                    ax.set_xlim(len(price_history) - 20, len(price_history) + 2)
                ax.autoscale(axis='y')
                ax.set_ylim(bottom=0)
            else:
                ax.set_xlim(current_xlim)
                ax.set_ylim(current_ylim)

            canvas.draw()
            price_label.config(text=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} $')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            conn.rollback()

        finally:
            conn.close()
            root_frame.after(2000, update_graph)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_graph()

def stop_trading_and_go_back(user_id, root_frame, show_main_screen):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    global active_crypto_screen
    active_crypto_screen = None
    show_main_screen(user_id)

def buy_crypto(user_id, crypto, amount):
    global conn
    """–ü–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT price FROM crypto_prices WHERE crypto=?", (crypto,))
        price = cursor.fetchone()[0]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
        total_price = price * amount

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT balance FROM users WHERE id=?", (user_id,))
        balance = cursor.fetchone()[0]

        if balance >= total_price:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (total_price, user_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT INTO portfolio (user_id, crypto, amount)
                VALUES (?, ?, ?)
                ON CONFLICT(user_id, crypto) DO UPDATE SET amount = amount + ?
            """, (user_id, crypto, amount, amount))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

            show_non_blocking_info(f"–í—ã –∫—É–ø–∏–ª–∏ {amount:.2f} {crypto} –∑–∞ {total_price:.2f} $")
        else:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
        conn.rollback()

def show_sell_window(user_id, crypto):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ–¥–∞–∂–∏"""
    sell_window = tk.Toplevel()
    sell_window.title(f"–ü—Ä–æ–¥–∞–∂–∞ {crypto}")
    sell_window.geometry("300x150")
    sell_window.configure(bg=BG_COLOR)

    cursor.execute("SELECT amount FROM portfolio WHERE user_id=? AND crypto=?", (user_id, crypto))
    result = cursor.fetchone()
    max_amount = result[0] if result else 0

    tk.Label(sell_window, text=f"–ü—Ä–æ–¥–∞–∂–∞ {crypto}", font=("Arial", 12), fg=TEXT_COLOR, bg=BG_COLOR).pack()

    amount_var = tk.DoubleVar(value=max_amount if max_amount > 0 else 0.1)

    amount_slider = tk.Scale(sell_window, from_=0.1, to=max_amount, resolution=0.1, orient="horizontal", variable=amount_var,
                              bg=BG_COLOR, fg=TEXT_COLOR, highlightbackground=BG_COLOR)
    amount_slider.pack()

    create_styled_button(sell_window, "–ü—Ä–æ–¥–∞—Ç—å", lambda: confirm_sell(user_id, crypto, amount_var.get(), sell_window))

def confirm_sell(user_id, crypto, amount, sell_window):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–¥–∞–∂—É"""
    sell_crypto(user_id, crypto, amount)
    sell_window.destroy()


def sell_crypto(user_id, crypto, amount):
    """–ü—Ä–æ–¥–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ"""
    cursor.execute("SELECT price FROM crypto_prices WHERE crypto=?", (crypto,))
    price = cursor.fetchone()[0]
    total_price = price * amount

    cursor.execute("SELECT amount FROM portfolio WHERE user_id=? AND crypto=?", (user_id, crypto))
    result = cursor.fetchone()

    if result and result[0] >= amount:
        cursor.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (total_price, user_id))
        cursor.execute("UPDATE portfolio SET amount = amount - ? WHERE user_id = ? AND crypto = ?",
                       (amount, user_id, crypto))
        conn.commit()
        show_non_blocking_info(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {amount:.2f} {crypto} –∑–∞ {total_price:.2f} $")
    else:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")


def update_prices():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –∞—Ç–æ–º–∞—Ä–Ω–æ"""
    global conn  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    while True:
        try:
            cursor = conn.cursor()
            cursor.execute("BEGIN IMMEDIATE")  # –Ø–≤–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

            for crypto in ["Bitcoin", "Ethereum", "Dogecoin"]:
                cursor.execute("SELECT price FROM crypto_prices WHERE crypto=?", (crypto,))
                old_price = cursor.fetchone()[0]

                new_price = max(1, old_price + random.uniform(-5, 5))

                cursor.execute("UPDATE crypto_prices SET price=? WHERE crypto=?", (new_price, crypto))
                cursor.execute("INSERT INTO price_history (crypto, price) VALUES (?, ?)", (crypto, new_price))

            conn.commit()  # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

        except sqlite3.OperationalError as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            conn.rollback()
            time.sleep(1)

        finally:
            time.sleep(2)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏


def start_price_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω."""
    global conn
    conn = sqlite3.connect("users.db", check_same_thread=False, timeout=20)

    thread = threading.Thread(target=update_prices, daemon=True)
    thread.start()

def show_non_blocking_info(message):
    top = tk.Toplevel()
    top.title("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    tk.Label(top, text=message).pack(padx=20, pady=10)
    tk.Button(top, text="OK", command=top.destroy).pack(pady=5)